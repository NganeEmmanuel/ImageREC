syntax = "proto3";

service MasterService {
    // Handles incoming image requests for images on the client machine
    rpc ProcessImage (ProcessImageRequest) returns (ProcessImageResponse);

    // Handles incoming image requests for remote images from a url
    rpc ProcessRemoteImage (RemoteImageRequest) returns (ProcessImageResponse);

    // Handles incoming image reprocessing requests
    rpc ReprocessImage (ReprocessRequest) returns (ReprocessResultResponse);

    // Queries the result of a previously processed image
    rpc QueryResult (QueryRequest) returns (ResultResponse);


    // RPC to list all available services or functionalities
    rpc GetServices (EmptyRequest) returns (GetServicesResponse);

    // Fetches the list of available models
    rpc GetModels (ModelRequest) returns (stream ModelInfo);

    // Fetches details about a specific model
    rpc GetModelDetails (ModelDetailRequest) returns (ModelDetail);

    // Fetches all request details for a particular user
    rpc GetAllUserRequest (UserCredentials) returns (stream RequestDataRespond);

    // Deletes a request by a user by request_id
    rpc DeleteProcessingRequest (QueryRequest) returns (ProcessImageResponse);
}

service WorkerService {
    // Processes a chunk of data
    rpc ProcessChunk (ChunkRequest) returns (ChunkResponse);

    // Health check for worker readiness
    rpc HealthCheck (HealthRequest) returns (HealthResponse);
}

// Common message for user credentials
message UserCredentials {
    string email = 1;
    string username = 2;
    string password = 3;
}

// Request for processing an image
message ProcessImageRequest {
  string user_id = 1;               // User ID for authentication
  UserCredentials user = 2;  // User information for authentication
  repeated ImageData images = 3;   // List of images to process
  string model_name = 4;           // Specify which model to use
  string action_type = 5;          // e.g., "categorize", "count_objects"
}

// Message for image data
message ImageData {
  string image_id = 1;             // Unique ID for the image
  bytes image_data = 2;            // Binary data for the image
}

//message ImageRequest {
//    UserCredentials user = 1;  // User information for authentication
//    bytes image_data = 2;      // The image data in bytes
//}

// Request for processing an image
message RemoteImageRequest {
    UserCredentials user = 1;  // User information for authentication
    string image_url = 2;      // The image data in bytes
}

// Message for the response of the ProcessImage RPC
message ProcessImageResponse {
    string request_id = 1;  // Unique ID for the request
}

// Request for querying the result of an image
message QueryRequest {
    UserCredentials user = 1;  // User information for authentication
    string request_id = 2;     // The request ID to query
}

// Response containing the status and result of a query
message ResultResponse {
    string status = 1;  // Status of the request (e.g., pending, completed, failed)
    repeated string result_data = 3; // The processed data or outcomes
}

// Message for listing all models
message EmptyRequest {}

// Request for reprocessing a a request already made
message ReprocessRequest {
    UserCredentials user = 1;  // User information for authentication
    string request_id = 2;     // The request ID to query
}

// Response containing the status and result of a query
message ReprocessResultResponse {
    string status = 1;  // Status of the request (e.g., pending, completed, failed)
    string request_id = 2;  // The request ID to be reprocessed
    string message = 3; // additional message for the response including errors or status
}

// Request to fetch available models
message ModelRequest {
    UserCredentials user = 1;  // User information for authentication
}

// Response streaming available model information
message ModelInfo {
    string model_name = 1;      // Name of the model
    string description = 2;     // Brief short Description of the model
    string version = 3;         // version of the model
    string supported_actions = 4;    // Comma-separated list of actions
    double accuracy = 5;       // Accuracy of the model
}

// Request to fetch details about a specific model
message ModelDetailRequest {
    UserCredentials user = 1;  // User information for authentication
    string model_name = 2;     // Name of the model to fetch details for
}

// Response with detailed information about the model
message ModelDetail {
    string model_name = 1;      // Name of the model
    string description = 2;     // Brief short Description of the model
    string version = 3;         // version of the model
    string supported_actions = 4;    // Comma-separated list of actions
    double accuracy = 5;       // Accuracy of the model
    string last_updated = 6;   // The last time the model was updated
}

// Message for the response of GetServices RPC
message GetServicesResponse {
  repeated string service_names = 1; // List of service names or functionalities
}

// Request to process a chunk of image data
message ChunkRequest {
    bytes chunk_data = 1;  // Binary data for the chunk
}

// Response from the worker for the processed chunk
message ChunkResponse {
    string result = 1;       // Result of the processing (JSON string)
    string worker_id = 2;    // ID of the worker that processed the chunk
}

// Request for health check
message HealthRequest {
    // No fields for basic health check
}

// Response for health check
message HealthResponse {
    string status = 1;  // Health status message (e.g., "ready", "unavailable")
}

// Response for request data for a user
message RequestDataRespond {
    string request_id = 1;
    string request_status = 2;
    string request_date = 3;
}


